set nocompatible                " choose no compatibility with legacy vi

" Leader
let mapleader=" "

" set fillchars+=stl:\ ,stlnc:\
" set fillchars=stl:―,stlnc:—,vert:│,fold:۰,diff:·

" create solid vertical split borders for gruvbox
set fillchars=vert:│

" delete pipe characters on styling vertical split borders for gruvbox
" set fillchars+=vert:\ 
" let g:gruvbox_vert_split='bg1'

" set term=xterm-256color
" set termencoding=utf-8

filetype off                    " required for vundle
set rtp+=~/.vim/bundle/vundle/  " required for vundle
call vundle#begin()

Plugin 'gmarik/vundle'

" --- Motion utilities
Plugin 'vim-scripts/matchit.zip'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'ctrlpvim/ctrlp.vim'

" --- Interface tweaks
" Plugin 'Lokaltog/vim-powerline'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Plugin 'edkolev/tmuxline.vim'
Plugin 'sjl/vitality.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'chriskempson/base16-vim'
"Plugin 'tomasr/molokai'
Plugin 'gruvbox-community/gruvbox'
"Plugin 'sjl/badwolf'
"Plugin 'nanotech/jellybeans.vim'

" --- Ruby utils
Plugin 'vim-scripts/ruby-matchit'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-endwise'
"Plugin 'tpope/vim-bundler'                  " Bundler utils

Plugin 'sheerun/vim-polyglot'

" --- General dev utils
Plugin 'airblade/vim-gitgutter'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-fugitive'
Plugin 'ervandew/supertab'
Plugin 'godlygeek/tabular'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-surround'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'mileszs/ack.vim'
Plugin 'kana/vim-smartinput'
Plugin 'Yggdroot/indentLine'
Plugin 'Keithbsmiley/investigate.vim'
" Plugin 'benmills/vimux'
" Plugin 'jgdavey/vim-turbux'
Plugin 'alvan/vim-closetag'
"Plugin 'tpope/vim-unimpaired'

" --- Testing
Plugin 'janko-m/vim-test'
Plugin 'tpope/vim-dispatch'

call vundle#end()               " required for vundle

" set smaller updatetime to refresh git-gutter faster (default=4000)
set updatetime=100

" filetypes for vim-closetag
let g:closetag_filenames = "*.html.erb,*.html,*.xhtml,*.phtml"

" Treat <li> and <p> tags like the block tags they are
" let g:html_indent_tags = 'li\|p'

" --- Testing Configs
" vim-test shortcuts
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-g> :TestVisit<CR>
nmap <silent> <Leader>t :TestFile<CR>
nmap <silent> <Leader>s :TestNearest<CR>
nmap <silent> <Leader>l :TestLast<CR>
nmap <silent> <Leader>e :TestSuite<CR>
nmap <silent> <Leader>g :TestVisit<CR>
let test#strategy = "dispatch"
let test#ruby#bundle_exec = 0 " don't prepend bundle exec when running

"au BufWritePost .vimrc so ~/.vimrc " automatically reload vimrc when it's saved

"" Some general editor stuff
"set clipboard=unnamed           " send yanks to the OS clipboard
"set mouse=a
set nobackup                    " Do not keep a backup file
set encoding=utf-8
set showcmd                     " display incomplete commands
set scrolloff=7                 " Never scroll to the edge of the window
set history=50                  " Keep the last 50 commands
set laststatus=2                " Show statusline on second last line
au FocusLost * :silent! wall    " Autosave on losing focus (works in iTerms2 and tmux using VITality plugin)
syntax enable
set synmaxcol=250               " limits syntax highlight to first 250 columns, to prevent slow down on long lines"
filetype plugin indent on       " load file type plugins + indentation
set belloff=all

" Store temporary files in a central spot
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

"" Folding
set nofoldenable
set foldmethod=indent
set foldlevelstart=20

"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set shiftround                  " Always indent/outdent to nearest tabstop
set backspace=indent,eol,start  " backspace through everything in insert mode

" pastetoggle doesn't work in neovim
if !has('nvim')
  set pastetoggle=<leader>pt    " "Set  to toggle paste on and off.
endif

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter
set gdefault                    " Make global search and replace the default (use /g to make it singular)
set wildmenu
set wildignorecase              "case is ignored when completing file names and directories
set wildignore+=*/.hg/*,*/.svn/*,*.swp,*.swo,*/node_modules/*

"" Editor window dressing
set termguicolors " 24-bit true colour
" let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
" let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"

" let base16colorspace=256  " Access colors present in 256 colorspace
" colorscheme base16-tomorrow
" colorscheme base16-solarized
" colorscheme base16-eighties
" colorscheme base16-ocean
" colorscheme base16-monokai

"" gruvbox customisation
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_sign_column='dark0_hard' "or bg0
let g:gruvbox_invert_selection='0'
let g:gruvbox_invert_tabline='0'
colorscheme gruvbox

" colorscheme solarized
set t_Co=256                    " 256 colours
set cursorline                  " Highlight current line
set ruler                       " Show a ruler
set number                      " Show line numbers
set relativenumber              " Show lines numbers relative to where you are
set showmatch                   " Show matching brackets
set guifont=Inconsolata:h18     "Set the font to Inconsolata at 18pt. (Yes, it's huge)
set bg=dark                     " Dark background
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮ " Make the list chars less hideous (and more like textmate)
set showbreak=↪

set statusline=\ [%F%m%r%h\ %w]\ \ \ [CWD:%r%{getcwd()}%h]\ \ \ [Filetype=%Y]\ \ \ %{fugitive#statusline()}\ \ \ [Line:%l/%L\ Col:%c\ %p%%]

"" Tab shortcuts
map <leader>tn :tabnew 
map <leader>tm :tabmove 
map <leader>te :tabe 
map <leader>tc :tabclose<cr>    " Close
map <leader><right> :tabn<cr>   " Select tab to the right
map <leader><left> :tabp<cr>    " Select tab to the left
map <leader><leader>k :tabn<cr> " Select tab to the right using k
map <leader><leader>j :tabp<cr> " Select tab to the left using j

"" Open v-split on right & h-split at bottom
" set splitbelow
set splitright

"" Split window shortcuts
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

"" Make vim jump to the last known line
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

"" Fix silly typos to DWIM, not DWIS
"cmap W w
cmap Q q
cmap gst Gstatus<CR>

"" Load up bundle specfic configuration
""  -- doesn't clutter up the rest of the vimrc this way.
runtime! bundle_config/*.vim

""" Highlight trailing whitespace
"highlight TrailWhitespace ctermbg=red guibg=red
"match TrailWhitespace /\s\+$\| \+\ze\t/

" Speed up start times when dealing with Ruby files
" For rbenv
let g:ruby_path = system('echo $HOME/.rbenv/shims')
" For rvm
"let g:ruby_path = system('rvm current')

" Abbreviations
iabbrev trye true

" shortcut for ack
map <Leader>a :Ack!<Space>

" quicker buffer navigation
nnoremap <Leader>p :ls<CR>:b<Space>
nnoremap <PageUp>   :bprevious<CR>
nnoremap <PageDown> :bnext<CR>
nnoremap <Leader>j <Esc>:bprevious<CR>
nnoremap <Leader>k <Esc>:bnext<CR>
" type :vb<space> to open buffer in a vertical split
cabbrev vb vert sb

" quicker split navigation
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-l> :wincmd l<CR>

" turn on spellchecking for markdown and gitcommit files
autocmd FileType gitcommit setlocal spell
autocmd FileType markdown setlocal spell
set complete+=kspell
